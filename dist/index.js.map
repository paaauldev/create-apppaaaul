{"version":3,"sources":["../node_modules/.pnpm/tsup@8.0.1_typescript@5.3.3/node_modules/tsup/assets/cjs_shims.js","../index.ts"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL('file:' + __filename).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","#!/usr/bin/env node\n\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport { cp, readFile, writeFile } from \"node:fs/promises\";\nimport { glob } from \"glob\";\nimport color from \"picocolors\";\nimport prompts from \"prompts\";\nimport yargs from \"yargs\";\nimport { hideBin } from \"yargs/helpers\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nconst execAsync = promisify(exec);\n\n// List of extras\nconst EXTRAS = {\n  \"next-eslint-ts-shadcn\": [\n    {\n      title: \"Clerk Auth\",\n      value: \"clerk\",\n    },\n    {\n      title: \"Auth0\",\n      value: \"auth0\",\n    },\n    {\n      title: \"Supabase\",\n      value: \"supabase\",\n    },\n    {\n      title: \"libSQL + Drizzle\",\n      value: \"libsql\",\n    },\n  ],\n};\n\n// Specify CLI arguments\nconst args = yargs(hideBin(process.argv)).options({\n  name: {\n    alias: \"n\",\n    type: \"string\",\n    description: \"Name of the project\",\n  },\n});\n\n// Override arguments passed on the CLI\nprompts.override(args.argv);\n\nasync function main() {\n  // Get the initial values for the prompts\n  const {\n    _: [initialName],\n  } = await args.argv;\n\n  // Create the project prompt\n  const project = await prompts(\n    [\n      {\n        type: \"text\",\n        name: \"name\",\n        message: \"What is the name of your project?\",\n        initial: initialName || \"apppaaaul-project\",\n        validate: (value) => {\n          if (value !== \".\" && value.match(/[^a-zA-Z0-9-_]+/g)) {\n            return \"Project name can only contain letters, numbers, dashes, underscores, or be '.' for the current directory\";\n          }\n          return true;\n        },\n      },\n    ],\n    {\n      onCancel: () => {\n        console.log(\"\\nBye ðŸ‘‹\\n\");\n\n        process.exit(0);\n      },\n    }\n  );\n\n  // Predefined template\n  const templateValue = \"next-eslint-ts-shadcn\";\n\n  // Get the template folder for the selected template\n  const template = path.join(\n    path.dirname(fileURLToPath(import.meta.url)),\n    \"templates\",\n    templateValue\n  );\n\n  // Get the destination folder for the project\n  const destination = project.name === \".\" ? process.cwd() : path.join(process.cwd(), project.name);\n\n  // Get the extras for the selected template\n  let extras = [];\n\n  if (EXTRAS[templateValue]) {\n    const { extras: results } = await prompts({\n      type: \"multiselect\",\n      name: \"extras\",\n      message: \"Which extras would you like to add?\",\n      choices: EXTRAS[templateValue],\n    });\n\n    // Assign to variable\n    extras = results;\n  }\n\n  // Copy files from the template folder to the current directory\n  await cp(path.join(template, \"project\"), destination, { recursive: true });\n\n  for await (const extra of extras) {\n    // Copy files from the extra folder to the current directory\n    await cp(path.join(template, \"extras\", extra), destination, { recursive: true });\n  }\n\n  // Get all files from the destination folder\n  const files = await glob(`**/*`, { nodir: true, cwd: destination, absolute: true });\n\n  // Read each file and replace the tokens\n  for await (const file of files) {\n    const data = await readFile(file, \"utf8\");\n    const draft = data.replace(/{{name}}/g, project.name);\n\n    await writeFile(file, draft, \"utf8\");\n  }\n\n  // Log outro message\n  console.log(\"\\nâœ¨ Project created âœ¨\");\n\n  // Extras log\n  if (extras.length) {\n    console.log(\n      `\\nCheck out ${color.italic(\n        extras.map((extra) => `${extra.toUpperCase()}.md`).join(\", \")\n      )} for more info on how to use it.`\n    );\n  }\n\n  // Run commands if a new directory was created\n  if (project.name !== \".\") {\n    try {\n      await execAsync(`cd ${project.name}`)\n      console.log(`\\n${color.green(`cd`)} ${project.name}`);\n      await execAsync(\"pnpm install\");\n      await execAsync(\"pnpm dev\");\n    } catch (error) {\n      console.error(`Error executing commands: ${error}`);\n    }\n  } else {\n    try {\n      await execAsync(\"pnpm install\");\n      await execAsync(\"pnpm dev\");\n    } catch (error) {\n      console.error(`Error executing commands: ${error}`);\n    }\n  }\n\n  // Contact logs\n  console.log(\"\\n---\\n\");\n  console.log(`Questions ðŸ‘€? ${color.underline(color.cyan(\"https://x.com/goncy\"))}`);\n}\n\n// Run the main function\nmain().catch(console.error);\n"],"mappings":"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","names":["yargs","prompts","path","color"]}